{"version":3,"sources":["Componants/SearchForm/SearchForm.js","Componants/SearchDisplay/SearchDisplay.js","Componants/App/App.js","serviceWorker.js","index.js"],"names":["SearchForm","searchUsers","useState","name","setName","errorMsg","setErrorMsg","validateInput","test","console","log","handleClick","e","preventDefault","onSubmit","className","value","onChange","target","onKeyDown","keyCode","handleEnter","type","placeholder","onClick","SearchDisplay","user","repos","login","rel","href","html_url","data-tooltip","email","hireable","src","avatar_url","alt","copyRepos","sort","a","b","moment","diff","updated_at","slice","map","repo","key","id","creatLinks","App","results","setResults","setRepos","notFoundMessage","setNotFoundMessage","query","fetch","res","json","data","status","fetchRepos","url","useEffect","repos_url","message","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"kUAmDeA,MA/Cf,YAAoC,IAAfC,EAAc,EAAdA,YAAc,EACTC,mBAAS,IADA,mBAC1BC,EAD0B,KACpBC,EADoB,OAEDF,mBAAS,IAFR,mBAE1BG,EAF0B,KAEhBC,EAFgB,KAI3BC,EAAgB,WACpB,OAAKJ,EAEM,kBAAkBK,KAAKL,GACzB,+CAETM,QAAQC,IAAI,kBAAkBF,KAAKL,IAJ1B,iCASLQ,EAAc,SAAAC,GAElB,GADAA,EAAEC,iBACEN,IAGF,OAFAD,EAAYC,UACZE,QAAQC,IAAIH,KAGdD,EAAY,IACZL,EAAYE,IASd,OACE,0BAAMW,SAAU,SAACF,GAAD,OAAOA,EAAEC,kBAAkBE,UAAU,cACnD,2BAAIV,GACJ,2BACEW,MAAOb,EACPc,SAAU,SAACL,GAAD,OAAOR,EAAQQ,EAAEM,OAAOF,QAClCG,UAAW,SAACP,GAAD,OAZG,SAACA,GACD,KAAdA,EAAEQ,SACJT,EAAYC,GAUQS,CAAYT,IAC9BU,KAAK,OACLC,YAAY,SAEhB,4BAAQD,KAAK,SAASE,QAAS,SAACZ,GAAD,OAAOD,EAAYC,KAAlD,a,6BCDWa,MAxCf,YAAuC,IAAfC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,MAiB5B,OACE,6BAASZ,UAAU,iBACf,6BAASA,UAAU,wBACjB,4BAAKW,EAAKE,OACV,iCACE,uBAAGb,UAAU,WAAWc,IAAI,sBAAsBC,KAAMJ,EAAKK,SAAUb,OAAO,UAC3EQ,EAAKvB,KAAO,uBAAG6B,eAAa,+BAAhB,iBAA6DN,EAAKvB,MAAY,2CAAiBuB,EAAKK,YAGpHL,EAAKO,MAAQ,qCAAWP,EAAKO,OAAa,yCAC1CP,EAAKQ,SAAW,4CAAuB,4CAE5C,yBAAKC,IAAKT,EAAKU,WAAYC,IAAI,gBAC/B,6BAAStB,UAAU,SACjB,kDACA,6BAASA,UAAU,cA/BN,WACjB,IAAMuB,EAAS,YAAOX,GAKtB,OAHAW,EAAUC,MAAK,SAACC,EAAEC,GAChB,OAAOC,MAASC,KAAKH,EAAEI,WAAY,QAAUF,MAASC,KAAKF,EAAEG,WAAY,SAAW,EAAI,KAEnFN,EAAUO,MAAM,EAAE,IAAIC,KAAI,SAAAC,GAC/B,OACA,uBAAGhC,UAAU,YAAYiC,IAAKD,EAAKE,GAAInB,KAAMiB,EAAKhB,SAAUb,OAAO,UACjE,4BAAQc,eAAa,6BAClBe,EAAK5C,UAsBL+C,O,MC0BIC,MA3Df,WAAgB,IAAD,EACiBjD,mBAAS,IAD1B,mBACNkD,EADM,KACGC,EADH,OAEanD,mBAAS,IAFtB,mBAENyB,EAFM,KAEC2B,EAFD,OAGiCpD,mBAAS,IAH1C,mBAGNqD,EAHM,KAGWC,EAHX,KAMPvD,EAAW,uCAAG,WAAMwD,GAAN,iBAAAjB,EAAA,+EAEEkB,MAAM,gCAAD,OAAiCD,IAFxC,cAEVE,EAFU,gBAGGA,EAAIC,OAHP,cAGVC,EAHU,YAIhBR,EAJgB,UAIEQ,EAJF,mCAKhBL,EAAmB,QAAD,OAASC,EAAT,eALF,kDAOhBhD,QAAQC,IAAI,KAAEoD,QAPE,0DAAH,sDAoBXC,EAAU,uCAAG,WAAMC,GAAN,iBAAAxB,EAAA,+EAEGkB,MAAMM,GAFT,cAETL,EAFS,gBAGIA,EAAIC,OAHR,cAGTC,EAHS,YAIfP,EAJe,UAIAO,EAJA,qFAMfpD,QAAQC,IAAI,KAAEoD,QANC,0DAAH,sDAuBhB,OAbAG,qBAAU,WACJb,EAAQc,WACVH,EAAWX,EAAQc,WAErBzD,QAAQC,IAAI0C,EAAQc,aACnB,CAACd,IAEJa,qBAAU,WACRxD,QAAQC,IAAIiB,KACX,CAACA,IAKF,0BAAMZ,UAAU,OACZ,wBAAIA,UAAU,cAAd,aACA,kBAAC,EAAD,CAAYd,YAAaA,IACxBmD,EAAQxB,OAAS,kBAAC,EAAD,CAAeF,KAAM0B,EAASzB,MAAOA,IACtDyB,EAAQe,SAlCX,iCACE,4BAAKZ,MCdOa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5E,QAAQ4E,MAAMA,EAAMlB,c","file":"static/js/main.cbff4a43.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport './SearchForm.css';\n\nfunction SearchForm({searchUsers}) {\n  const [name, setName] = useState('')\n  const [errorMsg, setErrorMsg] = useState('')\n\n  const validateInput = () => {\n    if (!name) {\n      return 'This Field Must Be Filled Out'\n    } else if (/[^A-Za-z0-9]+$/g.test(name)) {\n      return 'No Spaces or Special Characters Allowed'\n    }\n    console.log(/[^A-Za-z0-9]+$/g.test(name));\n\n  }\n\n\n  const handleClick = e => {\n    e.preventDefault()\n    if (validateInput()) {\n      setErrorMsg(validateInput())\n      console.log(validateInput());\n      return\n    }\n    setErrorMsg('')\n    searchUsers(name)\n  }\n\n  const handleEnter = (e) => {\n    if (e.keyCode === 13) {\n      handleClick(e)\n    }\n  }\n\n  return (\n    <form onSubmit={(e) => e.preventDefault()} className=\"SearchForm\">\n      <p>{errorMsg}</p>\n      <input\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n        onKeyDown={(e) => handleEnter(e)}\n        type='text'\n        placeholder='User'\n      />\n    <button type='button' onClick={(e) => handleClick(e)}>Search!</button>\n    </form>\n  );\n}\n\nexport default SearchForm;\n","import React from 'react';\nimport moment from 'moment';\n\nimport './SearchDisplay.css';\n\nfunction SearchDisplay({user, repos}) {\n  const creatLinks = () => {\n    const copyRepos = [...repos]\n\n    copyRepos.sort((a,b) => {\n      return moment().diff(a.updated_at, 'days') < moment().diff(b.updated_at, 'days') ? -1 : 1\n    })\n    return copyRepos.slice(0,20).map(repo => {\n      return (\n      <a className='repo-link' key={repo.id} href={repo.html_url} target=\"_blank\">\n        <button data-tooltip='Click Here to See Project'>\n          {repo.name}\n        </button>\n      </a>)\n    })\n  }\n\n  return (\n    <article className=\"SearchDisplay\">\n        <section className='SearchDisplay-header'>\n          <h2>{user.login}</h2>\n          <section>\n            <a className='user-url' rel=\"noopener noreferrer\" href={user.html_url} target=\"_blank\">\n              {user.name ? <p data-tooltip=\"Click Here to Visit Profile\">Profile Page: {user.name}</p> : <p>Profile Page:{user.html_url}</p>}\n            </a>\n          </section>\n          {user.email ? <p>Email: {user.email}</p> : <p>Email: N/A</p>}\n          {user.hireable ? <p>Hireable: Yes</p> : <p>Hireable: No</p>}\n        </section>\n      <img src={user.avatar_url} alt='User Avatar' />\n      <section className='repos'>\n        <h3>Most Recent Repos:</h3>\n        <section className='repo-links'>\n          {creatLinks()}\n        </section>\n      </section>\n    </article>\n  );\n}\n\nexport default SearchDisplay;\n","import React, { useState, useEffect } from 'react';\nimport SearchForm from './../SearchForm/SearchForm.js'\nimport SearchDisplay from './../SearchDisplay/SearchDisplay.js'\nimport './App.css';\n\nfunction App() {\n  const [results, setResults] = useState({})\n  const [repos, setRepos] = useState([])\n  const [notFoundMessage, setNotFoundMessage] = useState('')\n\n\n  const searchUsers = async query => {\n    try {\n      const res = await fetch(`https://api.github.com/users/${query}`)\n      const data = await res.json()\n      setResults( await data)\n      setNotFoundMessage(`User ${query} Not Found`)\n    } catch (e) {\n      console.log(e.status);\n    }\n\n  }\n\n  const notFound = () => {\n    return (\n      <section>\n        <h2>{notFoundMessage}</h2>\n      </section>\n    )\n  }\n\n  const fetchRepos = async url => {\n    try {\n      const res = await fetch(url)\n      const data = await res.json()\n      setRepos(await data)\n    } catch (e) {\n      console.log(e.status);\n    }\n  }\n\n  useEffect(() => {\n    if (results.repos_url) {\n      fetchRepos(results.repos_url)\n    }\n    console.log(results.repos_url);\n  }, [results])\n\n  useEffect(() => {\n    console.log(repos);\n  }, [repos])\n\n\n\n  return (\n    <main className=\"App\">\n        <h1 className=\"App-header\">GitSearch</h1>\n        <SearchForm searchUsers={searchUsers} />\n        {results.login && <SearchDisplay user={results} repos={repos}/>}\n        {results.message && notFound()}\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Componants/App/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}